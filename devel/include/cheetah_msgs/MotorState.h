// Generated by gencpp from file cheetah_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef CHEETAH_MSGS_MESSAGE_MOTORSTATE_H
#define CHEETAH_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cheetah_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : header()
    , q()
    , dq()
    , tau()
    , temperature()
    , q_des()
    , dq_des()
    , ff()  {
      q.assign(0.0);

      dq.assign(0.0);

      tau.assign(0.0);

      temperature.assign(0);

      q_des.assign(0.0);

      dq_des.assign(0.0);

      ff.assign(0.0);
  }
  MotorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q()
    , dq()
    , tau()
    , temperature()
    , q_des()
    , dq_des()
    , ff()  {
  (void)_alloc;
      q.assign(0.0);

      dq.assign(0.0);

      tau.assign(0.0);

      temperature.assign(0);

      q_des.assign(0.0);

      dq_des.assign(0.0);

      ff.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 20>  _q_type;
  _q_type q;

   typedef boost::array<float, 20>  _dq_type;
  _dq_type dq;

   typedef boost::array<float, 20>  _tau_type;
  _tau_type tau;

   typedef boost::array<int8_t, 20>  _temperature_type;
  _temperature_type temperature;

   typedef boost::array<float, 20>  _q_des_type;
  _q_des_type q_des;

   typedef boost::array<float, 20>  _dq_des_type;
  _dq_des_type dq_des;

   typedef boost::array<float, 20>  _ff_type;
  _ff_type ff;





  typedef boost::shared_ptr< ::cheetah_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cheetah_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::cheetah_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::cheetah_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::cheetah_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cheetah_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cheetah_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cheetah_msgs::MotorState_<ContainerAllocator1> & lhs, const ::cheetah_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.q == rhs.q &&
    lhs.dq == rhs.dq &&
    lhs.tau == rhs.tau &&
    lhs.temperature == rhs.temperature &&
    lhs.q_des == rhs.q_des &&
    lhs.dq_des == rhs.dq_des &&
    lhs.ff == rhs.ff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cheetah_msgs::MotorState_<ContainerAllocator1> & lhs, const ::cheetah_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cheetah_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cheetah_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "969f34f06b7c40b4845b6de1a412d6d5";
  }

  static const char* value(const ::cheetah_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x969f34f06b7c40b4ULL;
  static const uint64_t static_value2 = 0x845b6de1a412d6d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cheetah_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cheetah_msgs/MotorState";
  }

  static const char* value(const ::cheetah_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cheetah_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[20] q\n"
"float32[20] dq\n"
"float32[20] tau\n"
"int8[20] temperature\n"
"\n"
"float32[20] q_des\n"
"float32[20] dq_des\n"
"float32[20] ff\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cheetah_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cheetah_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q);
      stream.next(m.dq);
      stream.next(m.tau);
      stream.next(m.temperature);
      stream.next(m.q_des);
      stream.next(m.dq_des);
      stream.next(m.ff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cheetah_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cheetah_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "dq[]" << std::endl;
    for (size_t i = 0; i < v.dq.size(); ++i)
    {
      s << indent << "  dq[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dq[i]);
    }
    s << indent << "tau[]" << std::endl;
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      s << indent << "  tau[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tau[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "q_des[]" << std::endl;
    for (size_t i = 0; i < v.q_des.size(); ++i)
    {
      s << indent << "  q_des[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_des[i]);
    }
    s << indent << "dq_des[]" << std::endl;
    for (size_t i = 0; i < v.dq_des.size(); ++i)
    {
      s << indent << "  dq_des[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dq_des[i]);
    }
    s << indent << "ff[]" << std::endl;
    for (size_t i = 0; i < v.ff.size(); ++i)
    {
      s << indent << "  ff[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ff[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHEETAH_MSGS_MESSAGE_MOTORSTATE_H
