// Generated by gencpp from file cheetah_msgs/LegsCmd.msg
// DO NOT EDIT!


#ifndef CHEETAH_MSGS_MESSAGE_LEGSCMD_H
#define CHEETAH_MSGS_MESSAGE_LEGSCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cheetah_msgs/LegPrefix.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cheetah_msgs
{
template <class ContainerAllocator>
struct LegsCmd_
{
  typedef LegsCmd_<ContainerAllocator> Type;

  LegsCmd_()
    : header()
    , leg_prefix()
    , foot_pos_des()
    , foot_vel_des()
    , ff_cartesian()
    , kp_cartesian()
    , kd_cartesian()  {
    }
  LegsCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , leg_prefix(_alloc)
    , foot_pos_des(_alloc)
    , foot_vel_des(_alloc)
    , ff_cartesian(_alloc)
    , kp_cartesian(_alloc)
    , kd_cartesian(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::cheetah_msgs::LegPrefix_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cheetah_msgs::LegPrefix_<ContainerAllocator> >::other >  _leg_prefix_type;
  _leg_prefix_type leg_prefix;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _foot_pos_des_type;
  _foot_pos_des_type foot_pos_des;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _foot_vel_des_type;
  _foot_vel_des_type foot_vel_des;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _ff_cartesian_type;
  _ff_cartesian_type ff_cartesian;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _kp_cartesian_type;
  _kp_cartesian_type kp_cartesian;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _kd_cartesian_type;
  _kd_cartesian_type kd_cartesian;





  typedef boost::shared_ptr< ::cheetah_msgs::LegsCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cheetah_msgs::LegsCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LegsCmd_

typedef ::cheetah_msgs::LegsCmd_<std::allocator<void> > LegsCmd;

typedef boost::shared_ptr< ::cheetah_msgs::LegsCmd > LegsCmdPtr;
typedef boost::shared_ptr< ::cheetah_msgs::LegsCmd const> LegsCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cheetah_msgs::LegsCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cheetah_msgs::LegsCmd_<ContainerAllocator1> & lhs, const ::cheetah_msgs::LegsCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.leg_prefix == rhs.leg_prefix &&
    lhs.foot_pos_des == rhs.foot_pos_des &&
    lhs.foot_vel_des == rhs.foot_vel_des &&
    lhs.ff_cartesian == rhs.ff_cartesian &&
    lhs.kp_cartesian == rhs.kp_cartesian &&
    lhs.kd_cartesian == rhs.kd_cartesian;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cheetah_msgs::LegsCmd_<ContainerAllocator1> & lhs, const ::cheetah_msgs::LegsCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cheetah_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::LegsCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::LegsCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::LegsCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af3fce6606ed92c46ff29d0787c6aefb";
  }

  static const char* value(const ::cheetah_msgs::LegsCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf3fce6606ed92c4ULL;
  static const uint64_t static_value2 = 0x6ff29d0787c6aefbULL;
};

template<class ContainerAllocator>
struct DataType< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cheetah_msgs/LegsCmd";
  }

  static const char* value(const ::cheetah_msgs::LegsCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"LegPrefix[] leg_prefix\n"
"geometry_msgs/Point[] foot_pos_des\n"
"geometry_msgs/Vector3[] foot_vel_des\n"
"geometry_msgs/Vector3[] ff_cartesian\n"
"geometry_msgs/Vector3[] kp_cartesian\n"
"geometry_msgs/Vector3[] kd_cartesian\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cheetah_msgs/LegPrefix\n"
"uint8 FL = 0\n"
"uint8 FR = 1\n"
"uint8 RL = 2\n"
"uint8 RR = 3\n"
"\n"
"uint8 prefix\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cheetah_msgs::LegsCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.leg_prefix);
      stream.next(m.foot_pos_des);
      stream.next(m.foot_vel_des);
      stream.next(m.ff_cartesian);
      stream.next(m.kp_cartesian);
      stream.next(m.kd_cartesian);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LegsCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cheetah_msgs::LegsCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cheetah_msgs::LegsCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "leg_prefix[]" << std::endl;
    for (size_t i = 0; i < v.leg_prefix.size(); ++i)
    {
      s << indent << "  leg_prefix[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cheetah_msgs::LegPrefix_<ContainerAllocator> >::stream(s, indent + "    ", v.leg_prefix[i]);
    }
    s << indent << "foot_pos_des[]" << std::endl;
    for (size_t i = 0; i < v.foot_pos_des.size(); ++i)
    {
      s << indent << "  foot_pos_des[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.foot_pos_des[i]);
    }
    s << indent << "foot_vel_des[]" << std::endl;
    for (size_t i = 0; i < v.foot_vel_des.size(); ++i)
    {
      s << indent << "  foot_vel_des[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.foot_vel_des[i]);
    }
    s << indent << "ff_cartesian[]" << std::endl;
    for (size_t i = 0; i < v.ff_cartesian.size(); ++i)
    {
      s << indent << "  ff_cartesian[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.ff_cartesian[i]);
    }
    s << indent << "kp_cartesian[]" << std::endl;
    for (size_t i = 0; i < v.kp_cartesian.size(); ++i)
    {
      s << indent << "  kp_cartesian[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.kp_cartesian[i]);
    }
    s << indent << "kd_cartesian[]" << std::endl;
    for (size_t i = 0; i < v.kd_cartesian.size(); ++i)
    {
      s << indent << "  kd_cartesian[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.kd_cartesian[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHEETAH_MSGS_MESSAGE_LEGSCMD_H
