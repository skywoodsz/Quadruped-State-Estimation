// Generated by gencpp from file cheetah_msgs/FeetCmd.msg
// DO NOT EDIT!


#ifndef CHEETAH_MSGS_MESSAGE_FEETCMD_H
#define CHEETAH_MSGS_MESSAGE_FEETCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cheetah_msgs/LegPrefix.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>

namespace cheetah_msgs
{
template <class ContainerAllocator>
struct FeetCmd_
{
  typedef FeetCmd_<ContainerAllocator> Type;

  FeetCmd_()
    : header()
    , leg_prefix()
    , touch_state()
    , ground_reaction_force()
    , pos_final()
    , height()
    , swing_time()  {
    }
  FeetCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , leg_prefix(_alloc)
    , touch_state(_alloc)
    , ground_reaction_force(_alloc)
    , pos_final(_alloc)
    , height(_alloc)
    , swing_time(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::cheetah_msgs::LegPrefix_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cheetah_msgs::LegPrefix_<ContainerAllocator> >::other >  _leg_prefix_type;
  _leg_prefix_type leg_prefix;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _touch_state_type;
  _touch_state_type touch_state;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _ground_reaction_force_type;
  _ground_reaction_force_type ground_reaction_force;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pos_final_type;
  _pos_final_type pos_final;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _height_type;
  _height_type height;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _swing_time_type;
  _swing_time_type swing_time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STAND)
  #undef STAND
#endif
#if defined(_WIN32) && defined(SWING)
  #undef SWING
#endif

  enum {
    STAND = 0u,
    SWING = 1u,
  };


  typedef boost::shared_ptr< ::cheetah_msgs::FeetCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cheetah_msgs::FeetCmd_<ContainerAllocator> const> ConstPtr;

}; // struct FeetCmd_

typedef ::cheetah_msgs::FeetCmd_<std::allocator<void> > FeetCmd;

typedef boost::shared_ptr< ::cheetah_msgs::FeetCmd > FeetCmdPtr;
typedef boost::shared_ptr< ::cheetah_msgs::FeetCmd const> FeetCmdConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cheetah_msgs::FeetCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cheetah_msgs::FeetCmd_<ContainerAllocator1> & lhs, const ::cheetah_msgs::FeetCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.leg_prefix == rhs.leg_prefix &&
    lhs.touch_state == rhs.touch_state &&
    lhs.ground_reaction_force == rhs.ground_reaction_force &&
    lhs.pos_final == rhs.pos_final &&
    lhs.height == rhs.height &&
    lhs.swing_time == rhs.swing_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cheetah_msgs::FeetCmd_<ContainerAllocator1> & lhs, const ::cheetah_msgs::FeetCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cheetah_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cheetah_msgs::FeetCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cheetah_msgs::FeetCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cheetah_msgs::FeetCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b2d7269a2c528c8ac07c27db5a6b67d";
  }

  static const char* value(const ::cheetah_msgs::FeetCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b2d7269a2c528c8ULL;
  static const uint64_t static_value2 = 0xac07c27db5a6b67dULL;
};

template<class ContainerAllocator>
struct DataType< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cheetah_msgs/FeetCmd";
  }

  static const char* value(const ::cheetah_msgs::FeetCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 STAND=0\n"
"uint8 SWING=1\n"
"\n"
"Header header\n"
"LegPrefix[] leg_prefix\n"
"uint8[] touch_state\n"
"\n"
"# STAND\n"
"geometry_msgs/Vector3[] ground_reaction_force\n"
"\n"
"# SWING\n"
"geometry_msgs/Point[] pos_final\n"
"float64[] height\n"
"float64[] swing_time\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cheetah_msgs/LegPrefix\n"
"uint8 FL = 0\n"
"uint8 FR = 1\n"
"uint8 RL = 2\n"
"uint8 RR = 3\n"
"\n"
"uint8 prefix\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cheetah_msgs::FeetCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.leg_prefix);
      stream.next(m.touch_state);
      stream.next(m.ground_reaction_force);
      stream.next(m.pos_final);
      stream.next(m.height);
      stream.next(m.swing_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeetCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cheetah_msgs::FeetCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cheetah_msgs::FeetCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "leg_prefix[]" << std::endl;
    for (size_t i = 0; i < v.leg_prefix.size(); ++i)
    {
      s << indent << "  leg_prefix[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cheetah_msgs::LegPrefix_<ContainerAllocator> >::stream(s, indent + "    ", v.leg_prefix[i]);
    }
    s << indent << "touch_state[]" << std::endl;
    for (size_t i = 0; i < v.touch_state.size(); ++i)
    {
      s << indent << "  touch_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.touch_state[i]);
    }
    s << indent << "ground_reaction_force[]" << std::endl;
    for (size_t i = 0; i < v.ground_reaction_force.size(); ++i)
    {
      s << indent << "  ground_reaction_force[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.ground_reaction_force[i]);
    }
    s << indent << "pos_final[]" << std::endl;
    for (size_t i = 0; i < v.pos_final.size(); ++i)
    {
      s << indent << "  pos_final[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_final[i]);
    }
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "swing_time[]" << std::endl;
    for (size_t i = 0; i < v.swing_time.size(); ++i)
    {
      s << indent << "  swing_time[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.swing_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHEETAH_MSGS_MESSAGE_FEETCMD_H
